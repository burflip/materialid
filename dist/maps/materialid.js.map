{"version":3,"sources":["core.js","validators/digits.js","validators/notEmpty.js"],"names":[],"mappingsjLA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"materialid.js","sourcesContent":["/**\n * Copyright © 2016 Beebit Solutions\n * All rights reserved\n * Licensed under MIT License\n * Author: Valentín Pedrosa\n * valentin@beebitsolutions.com\n */\n/**\n * Materialid default options\n * @type {{fields: undefined, configs: {locale: string, trigger: string, error_callback: errorCallback, success_callback: successCallback, steps: undefined, on_forward: undefined, on_backward: undefined, enable_visible: boolean}, form_obj: {selector: undefined, is_valid: boolean}}}\n */\nvar materialid = {\n    fields: undefined,\n    configs: {\n        locale: \"es_ES\",\n        trigger: \"change\",\n        \"error_callback\": errorCallback,\n        \"success_callback\": successCallback,\n        steps: undefined,\n        on_forward: undefined,\n        on_backward: undefined,\n        enable_visible: true\n    },\n    form_obj: {\n        selector: undefined,\n        is_valid: true\n    }\n}\n\n/**\n * Index of current defined validators\n * @type {{notEmpty: notEmpty}}\n */\nvar callbacksIndex = {\n    \"notEmpty\": notEmpty\n}\n\n/**\n * Overloading of jQuery function\n */\njQuery.fn.extend({\n    materialid: function (config_array) {\n        initMaterialid(this, config_array)\n    }\n});\n\n/**\n * Initialization of Materialid\n * @param selector\n * @param config_array\n */\nfunction initMaterialid(selector, config_array) {\n    validateContainer(selector, config_array)\n}\n\n/**\n * Materialid container validation\n * @param selector\n * @param config_array\n */\nfunction validateContainer(selector, config_array) {\n    if (selector.is(\"form\")) {\n        initListeners(selector, config_array);\n        //Attaching form submit validation\n        selector.submit(function (e) {\n            evaluateFields(selector, config_array);\n            if (!materialid.form_obj.is_valid) {\n                e.preventDefault();\n            } else {\n                return;\n            }\n        });\n    } else if (selector.is(\"div\")) {\n        initListeners(selector, config_array);\n    } else {\n        console.log(\"Invalid selector: \", selector);\n        console.log(\"Types availables:div and form.\");\n    }\n}\n/**\n * Inits the fields' listeners to invoke validation\n * @param selector\n * @param config_array\n */\nfunction initListeners(selector, config_array) {\n    $.each(config_array.fields, function (k, v) {\n        addValidationListenerToField(selector.find(\"#\" + k), v);\n    })\n}\n\n/**\n * Attach a validation listener to a field\n * @param field\n * @param validators\n */\nfunction addValidationListenerToField(field, validators) {\n    if (materialid.configs.trigger == \"change\") {\n        field.change(function () {\n            validateField(field, validators);\n        })\n    } else {\n        //TODO: attach to trigger\n    }\n}\n\n/**\n * Validates a single field bearing in mind the \"enable_visible\" configuration option\n * @param field\n * @param validators\n * @returns {boolean}\n */\nfunction validateField(field, validators) {\n    var field_valid = true;\n    var msg = \"\";\n    if ((materialid.configs.enable_visible && field.is(\":visible\")) || !materialid.configs.enable_visible) {\n        $.each(validators, function (k, v) {\n            field_valid = validator(field, k, v) ? field_valid : false;\n            msg = messages[k];\n        })\n        console.log(\"Field validity:\" + field_valid)\n        field_valid ? successCallback(field, msg) : errorCallback(field, msg);\n        materialid.form_obj.is_valid = field_valid ? materialid.form_obj.is_valid : false;\n    }\n    return field_valid;\n}\n\n/**\n * Evaluate all fields without calling or invoking listeners.\n * @param selector\n * @param config_array\n */\nfunction evaluateFields(selector, config_array) {\n    $.each(config_array.fields, function (k, v) {\n        validateField(selector.find(\"#\" + k), v);\n    })\n}\n\n/**\n * Calls a concrete validator if exists, or return false and output an error on the console.\n * @param field\n * @param callback\n * @param settings\n * @returns {*}\n */\nfunction validator(field, callback, settings) {\n    if (typeof callbacksIndex[callback] !== \"undefined\") {\n        return callbacksIndex[callback](field, settings);\n    } else {\n        console.log(\"Callback \" + callback + \" undefined.\");\n        return false;\n    }\n}\n\n/**\n * Default error callback\n * @param field\n * @param msg\n */\nfunction errorCallback(field, msg) {\n    if ($(\"#\" + field.attr(\"id\") + \"_validation_msg\").length == 0) {\n        field.after(\"<span id='\" + field.attr(\"id\") + \"_validation_msg' class='validation-msg'></span>\");\n    }\n    $(\"#\" + field.attr(\"id\") + \"_validation_msg\").text(msg);\n    console.log(field);\n    field.removeClass(\"valid\").addClass(\"invalid\");\n}\n\n/**\n * Default success callback\n * @param field\n * @param msg\n */\nfunction successCallback(field, msg) {\n    console.log(\"successCalled\");\n    $(\"#\" + field.attr(\"id\") + \"_validation_msg\").remove();\n    console.log(\"#\" + field.attr(\"id\") + \"_validation_msg\", $(\"#\" + field.attr(\"id\") + \"_validation_msg\"))\n    field.removeClass(\"invalid\").addClass(\"valid\");\n}","","/**\n * Applicable fields: text, email, password, radio, checkbox, file, select\n * @param field\n * @returns {boolean}\n */\nfunction notEmpty(field)\n{\n    var is_valid = true;\n    var field_type = field.attr('type');\n    switch (field_type) {\n        case \"checkbox\":\n            field.is(\":checked\") ? null : is_valid = false;\n            break;\n        default:\n            $.trim(field.val()).length === 0 ? is_valid = false : null;\n            break;\n    }\n    return is_valid;\n}"],"sourceRoot":"/source/"}