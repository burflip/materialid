{"version":3,"sources":["core.js","validators/between.js","validators/cif.js","validators/digits.js","validators/dni.js","validators/nie.js","validators/notEmpty.js","validators/numeric.js","validators/regexp.js"],"names":[],"mappingsrLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"materialid.js","sourcesContent":["/**\n * Copyright © 2016 Beebit Solutions\n * All rights reserved\n * Licensed under MIT License\n * Author: Valentín Pedrosa\n * valentin@beebitsolutions.com\n */\n/**\n * Materialid default options\n * @type {{fields: undefined, configs: {locale: string, trigger: string, error_callback: errorCallback, success_callback: successCallback, steps: undefined, on_forward: undefined, on_backward: undefined, enable_visible: boolean}, form_obj: {selector: undefined, is_valid: boolean}}}\n */\nvar materialid = {\n    fields: undefined,\n    configs: {\n        locale: \"es_ES\",\n        trigger: \"change\",\n        \"error_callback\": errorCallback,\n        \"success_callback\": successCallback,\n        steps: undefined,\n        on_forward: undefined,\n        on_backward: undefined,\n        enable_visible: true\n    },\n    form_obj: {\n        selector: undefined,\n        is_valid: true\n    }\n}\n\n/**\n * Index of current defined validators\n * @type {{notEmpty: notEmpty}}\n */\nvar callbacksIndex = {\n    \"notEmpty\": notEmpty,\n    \"regexp\" : regexp,\n    \"digits\" : digits,\n    \"numeric\" : numeric,\n    \"dni\" : dni,\n    \"nie\" : nie,\n    \"cif\" : cif,\n}\n\n/**\n * Overloading of jQuery function\n */\njQuery.fn.extend({\n    materialid: function (config_array) {\n        initMaterialid(this, config_array)\n    }\n});\n\n/**\n * Initialization of Materialid\n * @param selector\n * @param config_array\n */\nfunction initMaterialid(selector, config_array) {\n    validateContainer(selector, config_array)\n}\n\n/**\n * Materialid container validation\n * @param selector\n * @param config_array\n */\nfunction validateContainer(selector, config_array) {\n    if (selector.is(\"form\")) {\n        initListeners(selector, config_array);\n        //Attaching form submit validation\n        selector.submit(function (e) {\n            evaluateFields(selector, config_array);\n            if (!materialid.form_obj.is_valid) {\n                e.preventDefault();\n            } else {\n                return;\n            }\n        });\n    } else if (selector.is(\"div\")) {\n        initListeners(selector, config_array);\n    } else {\n        console.log(\"Invalid selector: \", selector);\n        console.log(\"Types availables: div and form.\");\n    }\n}\n/**\n * Inits the fields' listeners to invoke validation\n * @param selector\n * @param config_array\n */\nfunction initListeners(selector, config_array) {\n    $.each(config_array.fields, function (k, v) {\n        addValidationListenerToField(selector.find(\"#\" + k), v);\n    })\n}\n\n/**\n * Attach a validation listener to a field\n * @param field\n * @param validators\n */\nfunction addValidationListenerToField(field, validators) {\n    if (materialid.configs.trigger == \"change\") {\n        field.change(function () {\n            validateField(field, validators);\n        })\n    } else {\n        //TODO: attach to trigger\n    }\n}\n\n/**\n * Validates a single field bearing in mind the \"enable_visible\" configuration option\n * @param field\n * @param validators\n * @returns {boolean}\n */\nfunction validateField(field, validators) {\n    var field_valid = true;\n    var msg = \"\";\n    if ((materialid.configs.enable_visible && field.is(\":visible\")) || !materialid.configs.enable_visible) {\n        $.each(validators, function (k, v) {\n            field_valid = validator(field, k, v) ? field_valid : false;\n            msg = messages[k];\n        })\n        field_valid ? successCallback(field, msg) : errorCallback(field, msg);\n        materialid.form_obj.is_valid = field_valid ? materialid.form_obj.is_valid : false;\n    }\n    return field_valid;\n}\n\n/**\n * Evaluate all fields without calling or invoking listeners.\n * @param selector\n * @param config_array\n */\nfunction evaluateFields(selector, config_array) {\n    $.each(config_array.fields, function (k, v) {\n        validateField(selector.find(\"#\" + k), v);\n    })\n}\n\n/**\n * Calls a concrete validator if exists, or return false and output an error on the console.\n * @param field\n * @param callback\n * @param settings\n * @returns {*}\n */\nfunction validator(field, callback, settings) {\n    if (typeof callbacksIndex[callback] !== \"undefined\") {\n        return callbacksIndex[callback](field, settings);\n    } else {\n        console.log(\"Callback \" + callback + \" undefined.\");\n        return false;\n    }\n}\n\n/**\n * Default error callback\n * @param field\n * @param msg\n */\nfunction errorCallback(field, msg) {\n    if ($(\"#\" + field.attr(\"id\") + \"_validation_msg\").length == 0) {\n        field.after(\"<span id='\" + field.attr(\"id\") + \"_validation_msg' class='validation-msg'></span>\");\n    }\n    $(\"#\" + field.attr(\"id\") + \"_validation_msg\").text(msg);\n    field.removeClass(\"valid\").addClass(\"invalid\");\n}\n\n/**\n * Default success callback\n * @param field\n * @param msg\n */\nfunction successCallback(field, msg) {\n    console.log(\"successCalled\");\n    $(\"#\" + field.attr(\"id\") + \"_validation_msg\").remove();\n    console.log(\"#\" + field.attr(\"id\") + \"_validation_msg\", $(\"#\" + field.attr(\"id\") + \"_validation_msg\"))\n    field.removeClass(\"invalid\").addClass(\"valid\");\n}","/** @namespace Number.MAX_SAFE_INTEGER */\n/** @namespace Number.MIN_SAFE_INTEGER */\n/**\n * Returns true if field value is between two parameters.\n * Check if is numeric value. No point to use it along numeric.\n * -----------------------------------\n * Default options are:\n * between:{\n *  min:-Number.MIN_SAFE_INTEGER,\n *  max:Number.MAX_SAFE_INTEGER,\n *  min_included:false,\n *  max_included:false\n * }\n * -----------------------------------\n * @param field\n * @param settings\n * @returns {boolean}\n */\nfunction between(field,settings)\n{\n    typeof settings[\"min_included\"] !== \"undefined\" ? null : settings.min_included = false;\n    typeof settings[\"max_included\"] !== \"undefined\" ? null : settings.max_included = false;\n    typeof settings[\"min\"] !== \"undefined\" ? null : settings.min = Number.MIN_SAFE_INTEGER;\n    typeof settings[\"max\"] !== \"undefined\" ? null : settings.max = Number.MAX_SAFE_INTEGER;\n    var is_valid = false;\n    var value = field.val();\n    if(!isNaN(value)) {\n        (settings.min < value && value < settings.max) ? is_valid = true : null;\n        if(settings.min_included && !settings.max_included) {\n            (settings.min <= value && value < settings.max) ? is_valid = true : null;\n        } else if(!settings.min_included && settings.max_included) {\n            (settings.min < value && value <= settings.max) ? is_valid = true : null;\n        } else if(settings.min_included && settings.max_included){\n            (settings.min <= value && value <= settings.max) ? is_valid = true : null;\n        }\n    }\n    return is_valid;\n}","/**\n * Checks if the field value is a valid spanish Company ID (CIF)\n * @param field\n * @param settings\n * @returns {boolean}\n */\nfunction cif(field, settings) {\n    if (notEmpty(field)) {\n        var value = field.val().toUpperCase();\n        var is_valid = false;\n        var pares = 0;\n        var impares = 0;\n        var suma;\n        var ultima;\n        var unumero;\n        var uletra = [\"J\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"];\n        var xxx;\n        var regular = /^[ABCDEFGHKLMNPQS]\\d{7}[0-9,A-J]$/g;\n        if (regular.test(value)) {\n            ultima = value.substr(8, 1);\n\n            for (var cont = 1; cont < 7; cont++) {\n                xxx = (2 * parseInt(value.substr(cont++, 1))).toString() + \"0\";\n                impares += parseInt(xxx.substr(0, 1)) + parseInt(xxx.substr(1, 1));\n                pares += parseInt(value.substr(cont, 1));\n            }\n            xxx = (2 * parseInt(value.substr(cont, 1))).toString() + \"0\";\n            impares += parseInt(xxx.substr(0, 1)) + parseInt(xxx.substr(1, 1));\n\n            suma = (pares + impares).toString();\n            unumero = parseInt(suma.substr(suma.length - 1, 1));\n            unumero = (10 - unumero).toString();\n            if (unumero == 10) unumero = 0;\n\n            if ((ultima == unumero) || (ultima == uletra[unumero]))\n                is_valid = true;\n            else {\n                is_valid = false;\n            }\n        }\n    } else {\n        is_valid = false;\n    }\n    return is_valid;\n}","/**\n * Usage:\n * digits:{}\n * Applicable fields: all with .val()\n * @param field\n * @param setttings\n * @returns {boolean}\n */\nfunction digits(field,setttings)\n{\n    return !/\\D+/g.test(field.val());\n}","/**\n * Checks if field is a valid spanish ID (DNI)\n * @param field\n * @param setttings\n * @returns {boolean}\n */\nfunction dni(field, setttings) {\n    var dni = field.val();\n    return validateDNI(dni);\n}\n\n/**\n * Checks if a value is a valid spanish ID (DNI)\n * @param dni\n * @returns {boolean}\n */\nfunction validateDNI(dni)\n{\n    var is_valid = true;\n    if (/^\\d{8}[a-zA-Z]$/.test(dni) == true) {\n        var charIndex = parseInt(dni.substr(0,8)) % 23;\n        var la = 'TRWAGMYFPDXBNJZSQVHLCKET'.charAt(charIndex);\n        la != dni.substr(dni.length - 1, 1).toUpperCase() ? is_valid = false : null;\n    } else {\n        is_valid = false;\n    }\n    return is_valid;\n}","/**\n *\n * @param field\n * @param settings\n * @returns {boolean}\n */\nfunction nie(field,settings)\n{\n    var is_valid = true;\n    var str = field.val().toString().toUpperCase();\n    if (/^[XYZ][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKET]$/i.test(str)) {\n        var nie = str.replace(/^[X]/, '0').replace(/^[Y]/, '1').replace(/^[Z]/, '2');\n        var letter = str.substr(-1);\n        ('TRWAGMYFPDXBNJZSQVHLCKET'.charAt(parseInt(nie.substr(0, 8)) % 23) === letter) ? is_valid = true : is_valid = false;\n    } else {\n        is_valid = false;\n    }\n\n    return is_valid;\n}","/**\n * Applicable fields: text, email, password, radio, checkbox, file, select\n * @param field\n * @returns {boolean}\n */\nfunction notEmpty(field)\n{\n    var is_valid = true;\n    var field_type = field.attr('type');\n    switch (field_type) {\n        case \"checkbox\":\n            field.is(\":checked\") ? null : is_valid = false;\n            break;\n        default:\n            $.trim(field.val()).length === 0 ? is_valid = false : null;\n            break;\n    }\n    return is_valid;\n}","/**\n * Returns if a field value is a numeric value\n * @param field\n * @param settings\n * @returns {boolean}\n */\nfunction numeric(field,settings)\n{\n    return !isNaN(field.val());\n}","/**\n * Usage:\n * regexp:{\n *  pattern:/e/\n * }\n * Applicable fields: all with .val()\n * @param field\n * @returns {boolean}\n */\nfunction regexp(field,setttings)\n{\n    return setttings.pattern.test(field.val());\n}"],"sourceRoot":"/source/"}